{"version":3,"sources":["components/dashboard/Block.js","components/dashboard/Transaction.js","actions/types.js","reducers/block.js","reducers/transaction.js","reducers/index.js","utils/setAuthToken.js","store.js","utils/api.js","img/orangebull.png","components/dashboard/Dashboard.js","actions/transaction.js","actions/block.js","App.js","index.js"],"names":["connect","blocks","block","map","blo","className","number","href","hash","slice","length","difficulty","size","timestamp","miner","height","transactions","transaction","tra","from","to","value","createdAt","txid","GET_LATEST_BLOCKS","BLOCK_ERROR","GET_LATEST_TRANSACTIONS","TRANSACTION_ERROR","initialState","loading","error","blockReducer","state","action","type","payload","transactionReducer","combineReducers","setAuthToken","token","api","defaults","headers","common","localStorage","setItem","removeItem","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","getState","subscribe","axios","create","baseURL","interceptors","response","use","res","err","Promise","reject","getLatestTransactions","dispatch","a","get","data","msg","statusText","status","getLatestBlocks","useEffect","src","logo","alt","App","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87a8c394.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Block = ({ block }) => {\r\n  const blocks = block.map((blo) => (\r\n    <tr className=\"naji-TableBodyRow_row\" key={blo.height}>\r\n        <td className=\"naji-width-100\"><span>{blo.number}</span></td>\r\n        <td className=\"naji-width-200\">\r\n            <a className=\"naji-LocalizedLink_link\" href=\"#\">{blo.hash.slice(1, 5)}...{blo.hash.slice(blo.hash.length - 5, blo.hash.length)}</a>\r\n        </td>\r\n        <td className=\"naji-width-100 \"><span>{blo.difficulty}</span></td>\r\n        <td className=\"naji-width-100\"><span>{blo.size}</span></td>\r\n        <td className=\"naji-width-100\"><span>{blo.timestamp}</span></td>\r\n        <td className=\"naji-width-200\"><span>{blo.miner.slice(1, 5)}...{blo.miner.slice(blo.miner.length - 5, blo.miner.length)}</span></td>\r\n\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"naji-LandingPage_epochList\">\r\n        <div className=\"naji-EpochList_epochListContainer\">\r\n            <div className=\"naji-Table_tableContainer\">\r\n                <div className=\"naji-Table_title\">\r\n                    <div className=\"naji-DividerWithTitle_dividerContainer\">\r\n                        <div className=\"naji-DividerWithTitle_line\">\r\n    \r\n                        </div>\r\n                        <span className=\"naji-DividerWithTitle_title\">Latest Blocks</span>\r\n                    </div>\r\n                </div>\r\n                <div className=\"naji-Table\">\r\n                  <table>\r\n                    <thead className=\"naji-TableHead_headContainer\">\r\n                      <tr>\r\n                        <th className=\"naji-width-100\">Number</th>\r\n                        <th className=\"naji-width-200\">Hash</th>\r\n                        <th className=\"naji-width-100\">Difficulty</th>\r\n                        <th className=\"naji-width-100\">Size</th>\r\n                        <th className=\"naji-width-100\">Timestamp</th>\r\n                        <th className=\"naji-width-200\">Miner</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"naji-TableBody_bodyContainer\">\r\n                      {blocks}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        {/* <div className=\"naji-ShowMoreButtonDecorator_root\">\r\n            <a className=\"naji-LocalizedLink_link\" href=\"#\">\r\n                <span className=\"naji-ShowMoreButtonDecorator_showMoreButton\">show more</span>\r\n            </a>\r\n        </div> */}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nBlock.propTypes = {\r\n  block: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(null)(Block);\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Transaction = ({ transaction }) => {\r\n  const transactions = transaction.map((tra) => (\r\n\r\n    <tr className=\"naji-TableBodyRow_row\" key={tra.txid}>\r\n        <td className=\"naji-width-200\"><span>{tra.from.slice(0,5)}...{tra.from.slice(tra.from.length-5, tra.from.length)}</span></td>\r\n        <td className=\"naji-width-200\"><span>{tra.to.slice(0,5)}...{tra.to.slice(tra.to.length-5, tra.to.length)}</span></td>\r\n        <td className=\"naji-width-200\"><span>{tra.value}</span></td>\r\n        <td className=\"naji-width-200 \"><span>{tra.createdAt}</span></td>\r\n    </tr>\r\n  ));\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"naji-LandingPage_epochList\">\r\n        <div className=\"naji-EpochList_epochListContainer\">\r\n            <div className=\"naji-Table_tableContainer\">\r\n                <div className=\"naji-Table_title\">\r\n                    <div className=\"naji-DividerWithTitle_dividerContainer\">\r\n                        <div className=\"naji-DividerWithTitle_line\">\r\n    \r\n                        </div>\r\n                        <span className=\"naji-DividerWithTitle_title\">Latest Transactions</span>\r\n                    </div>\r\n                </div>                \r\n                <div className=\"naji-Table\">\r\n                  <table>\r\n                    <thead className=\"naji-TableHead_headContainer\">\r\n                      <tr>\r\n                        <th className=\"naji-width-200\">From</th>\r\n                        <th className=\"naji-width-200\">To</th>\r\n                        <th className=\"naji-width-200\">Amount</th>\r\n                        <th className=\"naji-width-200\">Time</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody className=\"naji-TableBody_bodyContainer\">\r\n                      {transactions}\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n              </div>\r\n          </div>\r\n          {/* <div className=\"naji-ShowMoreButtonDecorator_root\">\r\n              <a className=\"naji-LocalizedLink_link\" href=\"#\">\r\n                  <span className=\"naji-ShowMoreButtonDecorator_showMoreButton\">show more</span>\r\n              </a>\r\n          </div> */}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nTransaction.propTypes = {\r\n  transaction: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default connect(null)(Transaction);\r\n","\r\nexport const GET_LATEST_BLOCKS = 'GET_LATEST_BLOCKS';\r\nexport const BLOCK_ERROR = 'BLOCK_ERROR';\r\n\r\nexport const GET_LATEST_TRANSACTIONS = 'GET_LATEST_TRANSACTIONS';\r\nexport const TRANSACTION_ERROR = 'TRANSACTION_ERROR';","import {\r\n  GET_LATEST_BLOCKS,\r\n  BLOCK_ERROR\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  blocks: [],\r\n  block: null,\r\n  loading: true,\r\n  error: {}\r\n};\r\n\r\nfunction blockReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_LATEST_BLOCKS:\r\n      return {\r\n        ...state,\r\n        blocks: payload,\r\n        loading: false\r\n      };\r\n    case BLOCK_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default blockReducer;\r\n","import {\r\n  GET_LATEST_TRANSACTIONS,\r\n  TRANSACTION_ERROR\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n  transactions: [],\r\n  transaction: null,\r\n  loading: true,\r\n  error: {}\r\n};\r\n\r\nfunction transactionReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case GET_LATEST_TRANSACTIONS:\r\n      return {\r\n        ...state,\r\n        transactions: payload,\r\n        loading: false\r\n      };\r\n    case TRANSACTION_ERROR:\r\n      return {\r\n        ...state,\r\n        error: payload,\r\n        loading: false\r\n      };\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default transactionReducer;\r\n","import { combineReducers } from 'redux';\r\nimport block from './block';\r\nimport transaction from './transaction';\r\n\r\nexport default combineReducers({\r\n  block,\r\n  transaction\r\n});\r\n","import api from './api';\r\n\r\n// store our JWT in LS and set axios headers if we do have a token\r\n\r\nconst setAuthToken = (token) => {\r\n  if (token) {\r\n    api.defaults.headers.common['x-auth-token'] = token;\r\n    localStorage.setItem('token', token);\r\n  } else {\r\n    delete api.defaults.headers.common['x-auth-token'];\r\n    localStorage.removeItem('token');\r\n  }\r\n};\r\n\r\nexport default setAuthToken;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\r\n\r\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\r\nlet currentState = store.getState();\r\n\r\nstore.subscribe(() => {\r\n  // keep track of the previous and current state to compare changes\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n});\r\n\r\nexport default store;\r\n","import axios from 'axios';\r\nimport store from '../store';\r\n\r\n// Create an instance of axios\r\nconst api = axios.create({\r\n  baseURL: '/api',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n/*\r\n  NOTE: intercept any error responses from the api\r\n and check if the token is no longer valid.\r\n ie. Token has expired or user is no longer\r\n authenticated.\r\n logout the user if the token has expired\r\n*/\r\n\r\napi.interceptors.response.use(\r\n  (res) => res,\r\n  (err) => {\r\n    return Promise.reject(err);\r\n  }\r\n);\r\n\r\nexport default api;\r\n","export default __webpack_public_path__ + \"static/media/orangebull.bc04a237.png\";","import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Block from './Block';\r\nimport Transaction from './Transaction';\r\nimport { getLatestBlocks } from '../../actions/block';\r\nimport { getLatestTransactions } from '../../actions/transaction';\r\nimport logo from '../../img/orangebull.png';\r\nimport '../../style.css';\r\n\r\nconst Dashboard = ({  \r\n  getLatestBlocks,\r\n  getLatestTransactions,\r\n  block,\r\n  transaction\r\n}) => {\r\n  useEffect(() => {\r\n    getLatestBlocks();\r\n    getLatestTransactions();\r\n  }, [getLatestTransactions]);\r\n\r\n//   setTimeout(() => {\r\n//       getLatestBlocks();\r\n//   }, 4000);\r\n\r\n  return (\r\n    <section className=\"naji-container\">\r\n            \r\n            <header className=\"naji-header\">\r\n                <div className=\"naji-header_logoContainer\">\r\n                    <a className=\"\" href=\"#\">\r\n                        <img src={logo}  className=\"naji-header_logoImg\" alt=\"logo\" />\r\n                    </a>\r\n                </div>\r\n                <div className=\"naji-header_titleContainer\">\r\n                    <a className=\"naji-LocalizedLink_link\" href=\"#\">\r\n                        <b>OX</b><span> BlockChain Explorer</span>\r\n                    </a>\r\n                </div>\r\n                <div className=\"naji-Header_triangleSign\">\r\n                    <div className=\"naji-Header_straightLine\">\r\n                \r\n                    </div>\r\n                    <div className=\"naji-Header_triangle\">\r\n                        <div className=\"naji-Header_innerTriangle\">\r\n                \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        \r\n            <div className=\"naji-searchContainer\">\r\n                <h2 className=\"naji-Search_searchTitle\">Search</h2>\r\n                <div className=\"naji-Search_searchContent\">\r\n                    <div className=\"naji-Search_searchInput naji-SimpleFormField_root\">\r\n                        <div className=\"naji-SimpleFormField_inputWrapper\">\r\n                            {/* <input className=\"naji-SimpleInput_input\" placeholder=\"Search forsdfgsdf epochs, blocks, addresses and transactions\"> */}\r\n                        </div>\r\n                    </div>  \r\n                    <button className=\"naji-Search_searchButton naji-SimpleButton_root\">\r\n                        <div className=\"naji-Search_searchButtonIcon\">\r\n                            <div className=\"naji-Search_searchButtonInner\">\r\n                            </div>\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        \r\n        \r\n            <Block block={block.blocks} />\r\n\r\n            <Transaction transaction={transaction.transactions} />\r\n\r\n    </section>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  getLatestBlocks: PropTypes.func.isRequired,\r\n  block: PropTypes.object.isRequired,\r\n  transaction: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  block: state.block,\r\n  transaction: state.transaction\r\n});\r\n\r\nexport default connect(mapStateToProps, { getLatestTransactions, getLatestBlocks })(\r\n  Dashboard\r\n);\r\n","import api from '../utils/api';\r\nimport {\r\n  GET_LATEST_TRANSACTIONS,\r\n  TRANSACTION_ERROR,\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Get Latest Blocks\r\nexport const getLatestTransactions = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/oxchains/latestTransactions');\r\n    dispatch({\r\n      type: GET_LATEST_TRANSACTIONS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: TRANSACTION_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n","import api from '../utils/api';\r\nimport {\r\n  GET_LATEST_BLOCKS,\r\n  BLOCK_ERROR,\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Get Latest Blocks\r\nexport const getLatestBlocks = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/oxchains/latestBlocks');\r\n    dispatch({\r\n      type: GET_LATEST_BLOCKS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: BLOCK_ERROR,\r\n      payload: { msg: err.response.statusText, status: err.response.status }\r\n    });\r\n  }\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nimport Dashboard from './components/dashboard/Dashboard';\r\n\r\n\r\n// Redux\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst App = () => {\r\n  useEffect(() => {\r\n    // check for token in LS when app first runs\r\n    if (localStorage.token) {\r\n      // if there is a token set axios headers for all requests\r\n      setAuthToken(localStorage.token);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <Routes>\r\n          <Route path=\"/\" element={<Dashboard />} />\r\n        </Routes>\r\n      </Router>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}